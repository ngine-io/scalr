{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Scalr - Autoscaling for Clouds Scalr allows to scale Cloud instances based on policy checks in a configurable interval. Scalr has 2 pluggable interfaces: cloud, policy. Cloud Plugins This is the connector to the API of your Cloud provider. It reads current available servers of your Scalr group and scales up and down based on a calculation factor received from one or more policies: Cloudscale.ch Hetzner Cloud DigitalOcean Apache CloudStack Exoscale (planned) PCextreme (planned) Vultr (planned) Policy Plugins A policy defines check of a target value (amount of CPU, amount of HTTP requests, etc) and where to gather the metric from, such as the following. Multiple policies can be used in a single config. HTTP endpoint returning JSON Random Metric (for testing) Prometheus (planned) InfluxDB (planned) Config Interfaces Your Cloud and policy configuration are defined by a configuration. Scalr reads its configuration on every run and can be changed inbetween runs. Static YAML file Static JSON file HTTP endpoint returning JSON Install Warning Scalr is heavily under development. pip install scalr-ngine Start Scalr As \"one shot\" to be used as cron job: scalr-ngine As daemon: scalr-ngine --periodic","title":"Home"},{"location":"index.html#scalr-autoscaling-for-clouds","text":"Scalr allows to scale Cloud instances based on policy checks in a configurable interval. Scalr has 2 pluggable interfaces: cloud, policy.","title":"Scalr - Autoscaling for Clouds"},{"location":"index.html#cloud-plugins","text":"This is the connector to the API of your Cloud provider. It reads current available servers of your Scalr group and scales up and down based on a calculation factor received from one or more policies: Cloudscale.ch Hetzner Cloud DigitalOcean Apache CloudStack Exoscale (planned) PCextreme (planned) Vultr (planned)","title":"Cloud Plugins"},{"location":"index.html#policy-plugins","text":"A policy defines check of a target value (amount of CPU, amount of HTTP requests, etc) and where to gather the metric from, such as the following. Multiple policies can be used in a single config. HTTP endpoint returning JSON Random Metric (for testing) Prometheus (planned) InfluxDB (planned)","title":"Policy Plugins"},{"location":"index.html#config-interfaces","text":"Your Cloud and policy configuration are defined by a configuration. Scalr reads its configuration on every run and can be changed inbetween runs. Static YAML file Static JSON file HTTP endpoint returning JSON","title":"Config Interfaces"},{"location":"index.html#install","text":"Warning Scalr is heavily under development. pip install scalr-ngine","title":"Install"},{"location":"index.html#start-scalr","text":"As \"one shot\" to be used as cron job: scalr-ngine As daemon: scalr-ngine --periodic","title":"Start Scalr"},{"location":"config.html","text":"Configs Scale configuration is made by creating a config.yml or whatever file SCALR_CONFIG points to. Note The config will be re-read before every run, no need to restart a running Scalr service after a config change. Common Config --- name : my scaling config base_rule : # Whether this config is enabled or disabled enabled : true # Allows to run Scalr without any actions taken. dry_run : false # Time to let Scalr hold on further actions after an action was taken. cooldown : 120 # Range in which Scalr will scale. min : 2 max : 5 # Define how many instances can be scaled down at once. # 0: no scaling down # -1: no limit. max_step_down : 1 # Optional: time based rules (first match) time_rules : - name : More capacity on Black Friday 2021 days_of_year : - Nov26 # Do not evaluate further rules on match on_match : break rule : min : 3 max : 8 - name : Turn off scaling during weekly maintenance days_of_year : - Wed times_of_day : - 01:00-04:00 rule : enabled : false - name : Allow Lights off on weekends weekdays : - Sun - Sat rule : min : 0 max_step_down : 2 # See Policy configs policies : [] # See Launch config kind : ... launch_config : {}","title":"Common"},{"location":"config.html#configs","text":"Scale configuration is made by creating a config.yml or whatever file SCALR_CONFIG points to. Note The config will be re-read before every run, no need to restart a running Scalr service after a config change.","title":"Configs"},{"location":"config.html#common-config","text":"--- name : my scaling config base_rule : # Whether this config is enabled or disabled enabled : true # Allows to run Scalr without any actions taken. dry_run : false # Time to let Scalr hold on further actions after an action was taken. cooldown : 120 # Range in which Scalr will scale. min : 2 max : 5 # Define how many instances can be scaled down at once. # 0: no scaling down # -1: no limit. max_step_down : 1 # Optional: time based rules (first match) time_rules : - name : More capacity on Black Friday 2021 days_of_year : - Nov26 # Do not evaluate further rules on match on_match : break rule : min : 3 max : 8 - name : Turn off scaling during weekly maintenance days_of_year : - Wed times_of_day : - 01:00-04:00 rule : enabled : false - name : Allow Lights off on weekends weekdays : - Sun - Sat rule : min : 0 max_step_down : 2 # See Policy configs policies : [] # See Launch config kind : ... launch_config : {}","title":"Common Config"},{"location":"launch_configs.html","text":"Launch configs Launch config to be used for new instances. Warning Changing a launch config have no affect to running Cloud instances. But this may change in the future. Cloudscale.ch kind : cloudscale_ch launch_config : flavor : flex-2 image : debian-10 zone : lpg1 tags : project : gemini ssh_keys : - ssh-rsa AAAA... user_data : | #cloud-config manage_etc_hosts: true package_update: true package_upgrade: true packages: - nginx Apache CloudStack kind : cloudstack launch_config : service_offering : Micro template : Linux Debian 10 zone : de-xy-1 ssh_key : my-key tags : project : gemini root_disk_size : 20 user_data : | #cloud-config manage_etc_hosts: true package_update: true package_upgrade: true packages: - nginx DigitalOcean kind : digitalocean launch_config : size : s-1vcpu-1gb image : debian-10-x64 region : ams3 ssh_keys : - 'b5:be:e8:...' tags : - 'project:gemini' user_data : | #cloud-config manage_etc_hosts: true package_update: true package_upgrade: true packages: - nginx Hetzner Cloud kind : hcloud launch_config : server_type : cx11 image : debian-10 labels : project : gemini location : fsn1 ssh_keys : - my_key user_data : | #cloud-config manage_etc_hosts: true package_update: true package_upgrade: true packages: - nginx","title":"Launch Configs"},{"location":"launch_configs.html#launch-configs","text":"Launch config to be used for new instances. Warning Changing a launch config have no affect to running Cloud instances. But this may change in the future.","title":"Launch configs"},{"location":"launch_configs.html#cloudscalech","text":"kind : cloudscale_ch launch_config : flavor : flex-2 image : debian-10 zone : lpg1 tags : project : gemini ssh_keys : - ssh-rsa AAAA... user_data : | #cloud-config manage_etc_hosts: true package_update: true package_upgrade: true packages: - nginx","title":"Cloudscale.ch"},{"location":"launch_configs.html#apache-cloudstack","text":"kind : cloudstack launch_config : service_offering : Micro template : Linux Debian 10 zone : de-xy-1 ssh_key : my-key tags : project : gemini root_disk_size : 20 user_data : | #cloud-config manage_etc_hosts: true package_update: true package_upgrade: true packages: - nginx","title":"Apache CloudStack"},{"location":"launch_configs.html#digitalocean","text":"kind : digitalocean launch_config : size : s-1vcpu-1gb image : debian-10-x64 region : ams3 ssh_keys : - 'b5:be:e8:...' tags : - 'project:gemini' user_data : | #cloud-config manage_etc_hosts: true package_update: true package_upgrade: true packages: - nginx","title":"DigitalOcean"},{"location":"launch_configs.html#hetzner-cloud","text":"kind : hcloud launch_config : server_type : cx11 image : debian-10 labels : project : gemini location : fsn1 ssh_keys : - my_key user_data : | #cloud-config manage_etc_hosts: true package_update: true package_upgrade: true packages: - nginx","title":"Hetzner Cloud"},{"location":"policy_configs.html","text":"Policy Configs Policies define if and how much to scale. Metric Target The target in is the metric we want to reach. A source metric returned higher than this target will result in scaling up, a lower to scaling down. Example Given a target of 5, a source metric returned of 10 will results in a scaling factor 2.0. With 2 instances already running, a factor 2 will scale to 4 instances (2 x 2.0), except the max allow instances is lower than 4. Prometheus Policy Query a Prometheus endpoint. Note Not yet implemented. policy : - name : Get Loadbalancer metrics target : 1000 source : prometheus query : \"scalar(avg(haproxy_server_current_sessions))\" InfluxDB Policy Query an InfluxDB endpoint. Note Not yet implemented. policy : - name : Get CPU metrics target : 70 source : influxdb query : \"select value from cpu_load_short;\" Web Policy Query a web endpoint. A JSON return {\"metric\": <int>} is expected in this case. policy : - name : get metric from web source : web query : http://localhost:8000/target.json config : # Optional headers headers : Authorization : Bearer xyz # Optional default key 'data' key : metric target : 5 Random Policy For testing purpose, random metric to get some action. policy : - name : get random nonsense source : random target : 3 config : start : 1 stop : 10","title":"Policy Configs"},{"location":"policy_configs.html#policy-configs","text":"Policies define if and how much to scale.","title":"Policy Configs"},{"location":"policy_configs.html#metric-target","text":"The target in is the metric we want to reach. A source metric returned higher than this target will result in scaling up, a lower to scaling down. Example Given a target of 5, a source metric returned of 10 will results in a scaling factor 2.0. With 2 instances already running, a factor 2 will scale to 4 instances (2 x 2.0), except the max allow instances is lower than 4.","title":"Metric Target"},{"location":"policy_configs.html#prometheus-policy","text":"Query a Prometheus endpoint. Note Not yet implemented. policy : - name : Get Loadbalancer metrics target : 1000 source : prometheus query : \"scalar(avg(haproxy_server_current_sessions))\"","title":"Prometheus Policy"},{"location":"policy_configs.html#influxdb-policy","text":"Query an InfluxDB endpoint. Note Not yet implemented. policy : - name : Get CPU metrics target : 70 source : influxdb query : \"select value from cpu_load_short;\"","title":"InfluxDB Policy"},{"location":"policy_configs.html#web-policy","text":"Query a web endpoint. A JSON return {\"metric\": <int>} is expected in this case. policy : - name : get metric from web source : web query : http://localhost:8000/target.json config : # Optional headers headers : Authorization : Bearer xyz # Optional default key 'data' key : metric target : 5","title":"Web Policy"},{"location":"policy_configs.html#random-policy","text":"For testing purpose, random metric to get some action. policy : - name : get random nonsense source : random target : 3 config : start : 1 stop : 10","title":"Random Policy"},{"location":"setup.html","text":"Setup Setup can be initialised either by ENV vars or by providing a .env file: Common Setup configs SCALR_INTERVAL = 20 SCALR_LOG_LEVEL = DEBUG SCALR_CONFIG = ./config.yml Cloudscale.ch API token CLOUDSCALE_API_TOKEN = <...> CloudStack API configs CLOUDSTACK_API_ENDPOINT = https://cloud.example.com/client/api CLOUDSTACK_API_KEY = <...> CLOUDSTACK_API_SECRET = <...> DigitalOcean API access token DIGITALOCEAN_ACCESS_TOKEN = <...> Exoscale API configs EXOSCALE_API_KEY = <...> EXOSCALE_API_SECRET = <...> Hetzner Cloud API token HCLOUD_API_TOKEN = <...>","title":"Setup"},{"location":"setup.html#setup","text":"Setup can be initialised either by ENV vars or by providing a .env file:","title":"Setup"},{"location":"setup.html#common-setup-configs","text":"SCALR_INTERVAL = 20 SCALR_LOG_LEVEL = DEBUG SCALR_CONFIG = ./config.yml","title":"Common Setup configs"},{"location":"setup.html#cloudscalech-api-token","text":"CLOUDSCALE_API_TOKEN = <...>","title":"Cloudscale.ch API token"},{"location":"setup.html#cloudstack-api-configs","text":"CLOUDSTACK_API_ENDPOINT = https://cloud.example.com/client/api CLOUDSTACK_API_KEY = <...> CLOUDSTACK_API_SECRET = <...>","title":"CloudStack API configs"},{"location":"setup.html#digitalocean-api-access-token","text":"DIGITALOCEAN_ACCESS_TOKEN = <...>","title":"DigitalOcean API access token"},{"location":"setup.html#exoscale-api-configs","text":"EXOSCALE_API_KEY = <...> EXOSCALE_API_SECRET = <...>","title":"Exoscale API configs"},{"location":"setup.html#hetzner-cloud-api-token","text":"HCLOUD_API_TOKEN = <...>","title":"Hetzner Cloud API token"}]}